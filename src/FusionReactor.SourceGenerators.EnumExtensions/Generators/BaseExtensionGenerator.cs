using FusionReactor.SourceGenerators.EnumExtensions.Generators.Strategies.Base;
using FusionReactor.SourceGenerators.EnumExtensions.Models;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace FusionReactor.SourceGenerators.EnumExtensions.Generators;

public static class BaseExtensionGenerator
{
    private static readonly IEnumerable<IExtensionGeneratorStrategy> Strategies = new[]
    {
        ContentStrategy.Factory,
        NamesStrategy.Factory,
        ValuesStrategy.Factory,
        GetContentStrategy.Factory,
        GetNameStrategy.Factory,
        GetNamesStrategy.Factory,
        GetValuesStrategy.Factory,
        //HasFlagFastStrategy.Factory,
        ParseStrategy.Factory,
        TryParseStrategy.Factory,
    };

    public static string Generate(IncrementalGeneratorInitializationContext context, EnumDefinition node)
    {
        var strategyResults = Strategies
            .Select(x => x.GetMethod(context, node));

        var stringBuilder = new StringBuilder();

        foreach (var strategyResult in strategyResults)
        {
            stringBuilder.AppendLine(strategyResult);
        }

        var returnValue =
            $$"""
             // <auto-generated />

             #nullable enable

             using System;
             using System.CodeDom.Compiler;
             using System.Collections.ObjectModel;

             namespace {{node.Namespace}};

             /// <summary>
             /// Extension methods for the <see cref="{{node.Name}}"/> enum.
             /// </summary>
             [GeneratedCode("FusionReactor.SourceGenerators.EnumExtensions", null)]
             {{node.Access}} static partial class {{node.Name}}Extensions
             {
                {{stringBuilder}}
             }
             """;

        return CSharpSyntaxTree
            .ParseText(returnValue)
            .GetRoot()
            .NormalizeWhitespace()
            .ToFullString();
    }
}
