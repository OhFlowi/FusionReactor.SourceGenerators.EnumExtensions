// <copyright file="BaseExtensionGenerator.cs" company="OhFlowi">
// Copyright (c) OhFlowi. All rights reserved.
// </copyright>

namespace FusionReactor.SourceGenerators.EnumExtensions.Generators;

using System.Text;
using FusionReactor.SourceGenerators.EnumExtensions.Generators.Strategies.Base;
using FusionReactor.SourceGenerators.EnumExtensions.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

/// <summary>
/// Represents a static class for generating base extensions.
/// </summary>
public static class BaseExtensionGenerator
{
    private static readonly IEnumerable<IExtensionGeneratorStrategy> Strategies =
    [
        ContentStrategy.Factory,
        NamesStrategy.Factory,
        ValuesStrategy.Factory,
        GetContentStrategy.Factory,
        GetNameStrategy.Factory,
        GetNamesStrategy.Factory,
        GetValuesStrategy.Factory,

        // HasFlagFastStrategy.Factory,
        ParseStrategy.Factory,
        TryParseStrategy.Factory,
    ];

    /// <summary>
    /// Generates a base extension string based on the provided initialization context and enum definition.
    /// </summary>
    /// <param name="context">The initialization context for the incremental generator.</param>
    /// <param name="node">The enum definition for which the base extension is generated.</param>
    /// <returns>A string representing the generated base extension.</returns>
    public static string Generate(IncrementalGeneratorInitializationContext context, EnumDefinition node)
    {
        var strategyResults = Strategies
            .Select(x => x.GetMethod(context, node));

        var stringBuilder = new StringBuilder();

        foreach (var strategyResult in strategyResults)
        {
            stringBuilder.AppendLine(strategyResult);
        }

        var returnValue = new StringBuilder();

        returnValue.AppendLine("// <auto-generated />");
        returnValue.AppendLine();
        returnValue.AppendLine("#nullable enable");
        returnValue.AppendLine();
        returnValue.AppendLine("using System;");
        returnValue.AppendLine("using System.CodeDom.Compiler;");
        returnValue.AppendLine("using System.Collections;");
        returnValue.AppendLine("#if NET8_0_OR_GREATER");
        returnValue.AppendLine("using System.Collections.Frozen;");
        returnValue.AppendLine("#endif");
        returnValue.AppendLine("using System.Collections.Generic;");
        returnValue.AppendLine("using System.Collections.ObjectModel;");
        returnValue.AppendLine();
        returnValue.AppendLine($"namespace {node.Namespace};");
        returnValue.AppendLine();
        returnValue.AppendLine("/// <summary>");
        returnValue.AppendLine($"/// Extension methods for the <see cref=\"{node.Name}\"/> enum.");
        returnValue.AppendLine("/// </summary>");
        returnValue.AppendLine("[GeneratedCode(\"FusionReactor.SourceGenerators.EnumExtensions\", null)]");
        returnValue.AppendLine($"{node.Access} static partial class {node.Name}Extensions");
        returnValue.AppendLine("{");
        returnValue.AppendLine(stringBuilder.ToString());
        returnValue.AppendLine("}");
        returnValue.AppendLine();

        return CSharpSyntaxTree
            .ParseText(returnValue.ToString())
            .GetRoot()
            .NormalizeWhitespace()
            .ToFullString();
    }
}
