// <copyright file="DisplayAttributeExtensionGenerator.cs" company="OhFlowi">
// Copyright (c) OhFlowi. All rights reserved.
// </copyright>

namespace FusionReactor.SourceGenerators.EnumExtensions.Generators;

using System.Text;
using FusionReactor.SourceGenerators.EnumExtensions.Generators.Strategies.DisplayAttribute;
using FusionReactor.SourceGenerators.EnumExtensions.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

/// <summary>
/// Provides methods for generating display attribute extension code for enum definitions.
/// </summary>
public static class DisplayAttributeExtensionGenerator
{
    private static readonly IEnumerable<IExtensionGeneratorStrategy> Strategies =
    [
        PropertyDisplayResultStrategy.Factory,
        DisplayShortNameStrategy.Factory,
        DisplayNameStrategy.Factory,
        DisplayDescriptionStrategy.Factory,
        DisplayPromptStrategy.Factory,
        DisplayGroupNameStrategy.Factory,
        DisplayOrderStrategy.Factory,
    ];

    /// <summary>
    /// Generates display attribute extension code for the specified enum definition.
    /// </summary>
    /// <param name="context">The initialization context for the incremental generator.</param>
    /// <param name="node">The enum definition for which to generate the display attribute extension.</param>
    /// <returns>The generated display attribute extension code as a string.</returns>
    public static string Generate(IncrementalGeneratorInitializationContext context, EnumDefinition node)
    {
        var strategyResults = Strategies
            .Select(x => x.GetMethod(context, node));

        var stringBuilder = new StringBuilder();

        foreach (var strategyResult in strategyResults)
        {
            stringBuilder.AppendLine(strategyResult);
        }

        var returnValue = new StringBuilder();

        returnValue.AppendLine("// <auto-generated />");
        returnValue.AppendLine();
        returnValue.AppendLine("#nullable enable");
        returnValue.AppendLine();
        returnValue.AppendLine("using System;");
        returnValue.AppendLine("using System.Collections;");
        returnValue.AppendLine("#if NET8_0_OR_GREATER");
        returnValue.AppendLine("using System.Collections.Frozen;");
        returnValue.AppendLine("#endif");
        returnValue.AppendLine("using System.Collections.Generic;");
        returnValue.AppendLine("using System.Collections.ObjectModel;");
        returnValue.AppendLine("using FusionReactor.SourceGenerators.EnumExtensions;");
        returnValue.AppendLine();
        returnValue.AppendLine($"namespace {node.Namespace};");
        returnValue.AppendLine();
        returnValue.AppendLine($"{node.Access} static partial class {node.Name}Extensions");
        returnValue.AppendLine("{");
        returnValue.AppendLine(stringBuilder.ToString());
        returnValue.AppendLine("}");
        returnValue.AppendLine();

        return CSharpSyntaxTree
            .ParseText(returnValue.ToString())
            .GetRoot()
            .NormalizeWhitespace()
            .ToFullString();
    }
}
