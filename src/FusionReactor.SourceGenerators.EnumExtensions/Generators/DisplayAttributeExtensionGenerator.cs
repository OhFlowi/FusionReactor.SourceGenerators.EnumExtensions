using FusionReactor.SourceGenerators.EnumExtensions.Generators.Strategies.DisplayAttribute;
using FusionReactor.SourceGenerators.EnumExtensions.Models;
using System.Text;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace FusionReactor.SourceGenerators.EnumExtensions.Generators;

public static class DisplayAttributeExtensionGenerator
{
    private static readonly IEnumerable<IExtensionGeneratorStrategy> Strategies = new[]
    {
        PropertyDisplayResultStrategy.Factory,
        DisplayShortNameStrategy.Factory,
        DisplayNameStrategy.Factory,
        DisplayDescriptionStrategy.Factory,
        DisplayPromptStrategy.Factory,
        DisplayGroupNameStrategy.Factory,
        DisplayOrderStrategy.Factory,
    };

    public static string Generate(IncrementalGeneratorInitializationContext context, EnumDefinition node)
    {
        var strategyResults = Strategies
            .Select(x => x.GetMethod(context, node));

        var stringBuilder = new StringBuilder();

        foreach (var strategyResult in strategyResults)
        {
            stringBuilder.AppendLine(strategyResult);
        }

        var returnValue =
            $$"""
             // <auto-generated />

             #nullable enable

             using System;
             using System.Collections;
             using System.Collections.Generic;
             using System.Collections.ObjectModel;
             using FusionReactor.SourceGenerators.EnumExtensions;

             namespace {{node.Namespace}};

             {{node.Access}} static partial class {{node.Name}}Extensions
             {
                {{stringBuilder}}
             }
             """;

        return CSharpSyntaxTree
            .ParseText(returnValue)
            .GetRoot()
            .NormalizeWhitespace()
            .ToFullString();
    }
}
