// <copyright file="EnumExtensionPart.cs" company="OhFlowi">
// Copyright (c) OhFlowi. All rights reserved.
// </copyright>

namespace FusionReactor.SourceGenerators.EnumExtensions.Parts;

using System.CodeDom.Compiler;
using FusionReactor.SourceGenerators.EnumExtensions.Extensions;
using Microsoft.CodeAnalysis;

/// <summary>
/// TODO:.
/// </summary>
public static class EnumExtensionPart
{
    private const string Header =
        """
        // <auto-generated />

        #nullable enable

        namespace {0};

        using System;
        using System.CodeDom.Compiler;
        using System.Collections;
        #if NET8_0_OR_GREATER
        using System.Collections.Frozen;
        #endif
        using System.Collections.Generic;
        using System.Collections.ObjectModel;

        /// <summary>
        /// Extension methods for the <see cref = "{1}"/> enum.
        /// </summary>
        [GeneratedCode("FusionReactor.SourceGenerators.EnumExtensions", null)]
        public static class {1}Extensions
        {{
        """;

    /// <summary>
    /// TODO:.
    /// </summary>
    /// <param name="symbol">TODO: 1.</param>
    /// <param name="writer">TODO: 2.</param>
    public static void WriteHeader(INamedTypeSymbol symbol, IndentedTextWriter writer)
    {
        if (writer == null)
        {
            throw new ArgumentNullException(nameof(writer));
        }

        if (symbol == null)
        {
            throw new ArgumentNullException(nameof(symbol));
        }

        writer.WriteLine(
            Header,
            symbol.ContainingNamespace.FullNamespace(),
            symbol.Name);
    }

    /// <summary>
    /// TODO:.
    /// </summary>
    /// <param name="writer">TODO: .</param>
    public static void WriteFooter(IndentedTextWriter writer)
    {
        if (writer == null)
        {
            throw new ArgumentNullException(nameof(writer));
        }

        writer.WriteLine("}");
    }
}
